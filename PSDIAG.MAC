;POOLSHARK DIAGNOSTICS
	.TITLE	PSDIAG  1/26/77  ORR
	.ASECT
	.RADIX	16
	.=4000
IRQRST	=6800
DISP	=400
VPOS	=0C00
HPOS	=800
P1	=1000
P2	=1001
CN1	=1002
CN2	=1003
SCRAT	=1400
SCORES	=1800
CLICK	=1C00
CONTRL	=6000
BUMP	=6400
STF1	=6C02
STN1	=6C03
STF2	=6C04
STN2	=6C05
STF12	=6C06
STN12	=6C07
TPUSH	=5000
TSTSET	=5400
TDIS	=5400
AT	=0BB
OBJH	=0
OBJV	=10
R0	=40
R1	=41
R2	=42
R3	=43
R4	=44
R5	=45
SYNC	=98
RTC	=99
PSYNC	=9C
SPT	=8A
MORA	=8C
MORD	=8E
HEAT	=0AF
TEMP	=0B4
	.SBTTL	RESET, SELECT TEST, WAIT FOR D7
DIAG:	SEI
	CLR	E,TDIS
	LDAA	E,TPUSH
DLP1:	JSR	E,BLANK
	JSR	E,CLPOS		;CLEAN UP THE SCREEN BEFORE STARTING
	LDAA	E,TPUSH
	LDS	I,0FD
	CLR	E,BUMP
	CLR	E,SCRAT
DLP:	CLRA
	JSR	E,MESOUT		;"SELECT TEST"
1$:	LDAA	E,TPUSH
	STAA	E,CN2		;WATCH DOG
	BPL	1$
SOFF:	LDAA	I,0FF
	DECA
	BNE	S,-1
	LDAA	E,TPUSH
	STAA	E,CN2
	BMI	SOFF
	JSR	E,BLANK
	CLR	E,TDIS			;ALL LEDS OFF PLEASE!
	LDAA	E,TSTSET		;GET TEST #
	ANDA	I,03F
	BEQ	RAMTST			;DO RAM TEST
	ASLA
	LDX	I,TSTTBL
	STX	D,R0
	ADDA	D,R1
	STAA	D,R1
	LDAA	D,R0
	ADCA	I,0
	STAA	D,R0
	LDX	D,R0
	LDX	X,0
	JSR	X,0
	JSR	E,BLANK
	JSR	E,CLPOS
	BRA	DIAG
TSTTBL:	.BYTE	DIAG&0FF00/100,DIAG&0FF
	.BYTE	ROMTST&0FF00/100,ROMTST&0FF
	.BYTE	DSPTST&0FF00/100,DSPTST&0FF
	.BYTE	SWTTST&0FF00/100,SWTTST&0FF
	.BYTE	POTALG&0FF00/100,POTALG&0FF
	.BYTE	VPTST&0FF00/100,VPTST&0FF
	.BYTE	HPTST&0FF00/100,HPTST&0FF
	.BYTE	SNDTST&0FF00/100,SNDTST&0FF
	.PAGE
	.SBTTL	RAM TEST
;LIGHTS ALL LEDS IF RAM OK
;LIGHTS 2 TO 7 IF UPPER 128 BAD
;LIGHTS 2 TO 6 IF LOWER 128 BAD
RAMTST:	LDX	I,0
	CLRA
	STAA	X,0
	INX
	INCA
	BNE	S,-4
	LDX	I,0
	CMPA	X,0
	BNE	ERR
	INX
	INCA
	BNE	S,-6
	LDAA	I,0FF
	STAA	E,TDIS
	JMP	E,DLP1
ERR:	BITA	I,80
	BEQ	ERR1
	LDAA	I,80
	STAA	E,TDIS
	BRA	HLD
ERR1:	LDAA	I,40
	STAA	E,TDIS
HLD:	LDAA	X,0
	STAA	E,CN2			;LOOP & WATCH DOG
	BRA	S,-5
	.PAGE
	.SBTTL	ROM CHECKSUM TEST
;LIGHTS INDICATED LED TO INDICATE BAD ROM
ROMA:	.BYTE	0,0			;MSB CKSM, LSB CKSM - FOR USE WITH PROMS
ROMB:	.BYTE	0,0
ROMC:	.BYTE	0,0
ROMD:	.BYTE	0,0
	;ROM TEST ROUTINE

CKSM:	CLR	E,R4			;UPPER CHECKSUM HOLD
	CLR	E,R5			;LOWER CHECKSUM HOLD
CK1:	LDAA	X,0
	TAB
	ANDA	I,0F
	ADDA	D,R5
	STAA	D,R5
	LSRB
	LSRB
	LSRB
	LSRB
	ADDB	D,R4
	STAB	D,R4
	CPX	D,R2			;UPPER LIMIT YET?
	BEQ	1$			;IF YES, WERE DONE
	INX				;ELSE ADD IN NEXT BYTE
	BRA	CK1
1$:	RTS
ROMTST:	CLR	E,R0			;CLEAR ERROR FLAG
	LDX	I,73FF			;SAVE UPPER LIMIT
	STX	D,R2
	LDX	I,7000			;START OF FIRST K
	BSR	CKSM
	CMPA	E,ROMA+1		;CHECK LSB CHECKSUM
	BEQ	CK2
	LDAA	I,1
	STAA	D,R0
	STAA	E,TDIS			;LIGHT 2 TO 0 FOR ERROR LSB1
CK2:	CMPB	E,ROMA			;MSB1?
	BEQ	ROM2
	LDAB	I,2			;LIGHT 2 TO 1 FOR ERROR MSB1
	ORAB	D,R0
	STAB	D,R0
	STAB	E,TDIS
ROM2:	LDX	I,77FF			;END OF SECOND K
	STX	D,R2
	LDX	I,7400
	BSR	CKSM
	CMPA	E,ROMB+1		;LSB2?
	BEQ	CK3
	LDAA	I,4
	ORAA	D,R0
	STAA	D,R0
	STAA	E,TDIS			;LIGHT 2 TO 2 FOR ERROR LSB2
CK3:	CMPB	E,ROMB			;MSB2?
	BEQ	ROM3
	LDAB	I,8
	ORAB	D,R0
	STAB	D,R0
	STAB	E,TDIS			;LIGHT TO TO 3 FOR ERROR MSB2
ROM3:	LDX	I,7BFF			;END OF ROM3
	STX	D,R2
	LDX	I,7800
	BSR	CKSM
	CMPA	E,ROMC+1		;LSB3?
	BEQ	CK4
	LDAA	I,10
	ORAA	D,R0
	STAA	D,R0
	STAA	E,TDIS			;LIGHT 2 TO 4 FOR ERROR LSB3
CK4:	CMPB	E,ROMC			;MSB3?
	BEQ	ROM4
	LDAB	I,20
	ORAB	D,R0
	STAB	D,R0
	STAB	E,TDIS			;LIGHT 2 TO 5 FOR ERROR MSB3
ROM4:	LDX	I,7FFF		;END OF LAST K
	STX	D,R2
	LDX	I,7C00
	JSR	E,CKSM
	CMPA	E,ROMD+1		;LSB4
	BEQ	CK5
	LDAA	I,40
	ORAA	D,R0
	STAA	D,R0
	STAA	E,TDIS		;LIGHT 2 TO 6 FOR ERROR LSB4
CK5:	CMPB	E,ROMD		
	BEQ	ENCK		;END CHECK
	LDAA	I,80
	ORAA	D,R0
	STAA	D,R0
	STAA	E,TDIS		;LIGHT 2 TO 7 FOR ERROR MSB4
ENCK:	LDAB	D,R0		;ANY ERRORS
	BNE 	BADROM
	CLR 	E,TDIS		;LIGHTS OFF
BADROM:	LDAA	I,0A		;WRITE "TEST COMPLETE"
	JSR	E,MESOUT
CKLP1:	LDAA	X,0
	STAA	E,CN2		;WATCH DOG
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	CKLP1
CKLP2:	LDAA	I,0FF
	DECA
	BNE	S,-1
	STAA	E,CN2
	LDAA	E,TPUSH
	BITA	I,40
	BNE	CKLP2
	RTS
	.PAGE
	.SBTTL	DISPLAY BLANK & CHAR TEST
;BLANKS SCREEN ON D6, DRAWS WHOLE CHAR SET
DSPTST:	LDAA	I,80
	STAA	D,AT
	LDX	I,2F
	LDAA	I,8
	STAA	X,0
	DEX
	BNE	S,-3
	STAA	X,0
DSPLP0:	BSR	BLANK
	CLR	E,SYNC
DSPLP1:	LDAA	E,TPUSH
	BITA	I,40
	BNE	DSPLP2
	LDAA	D,SYNC
	BPL	DSPLP1
	BRA	DSPLP0
DSPLP2:	BSR	CKLP2
DSPLP3:	LDX	I,DISP		;WRITE CHARACTER SET
	LDAB	I,20
	STAB	D,R0
	STAB	D,R1
	CLRA
DSPLP4:	CLR	E,SYNC
	CLR	E,PSYNC
	STAA	E,CN2			;KEEP THE DOG QUIET PLEASE
1$:	LDAB	D,PSYNC			;AN INTERRUPT YET?
	BPL	1$			;JUST HAVE TO WAIT AROUND AWHILE
DSPLP5:	LDAB	E,TPUSH
	BITB	I,40
	BNE	DSPLP7
	LDAB	D,PSYNC
	STAA	E,CN2
DSPLP6:	STAA	X,0
	INX
	INCA
	DEC	E,R1
	BNE	DSPLP6
	LDAB	I,20
	STAB	D,R1
	DEC	E,R0
	BNE	DSPLP4
	BRA	DSPLP3
DSPLP7:	BSR	BLANK
	RTS
BLANK:	LDX	I,DISP
	LDAB	I,20
	STAB	D,R0
BLKLP:	CLR	E,SYNC
	CLR	E,PSYNC
	CLI
BLK:	LDAA	D,PSYNC
	STAA	E,CN2
	BPL	BLK
BLKLP1:	CLR	X,0
	INX
	DECB
	BNE	BLKLP1
	LDAB	I,20
	DEC	E,R0
	BNE	BLKLP
	LDAB	I,8
	LDX	I,HEAT+1		;THIS IS TO KEEP SOME OF TAH'S
1$:	CLR	X,0			;INTERRUPT STUFF OFF THE SCREEN	
	DEX				;...LIKE SCORES, TIMERS, RACK NUMBERS...
	DECB
	BNE	1$
	LDAB	I,20			;... AND ARROWS....!!!!!!!!
	STAB	D,RTC
	RTS
	.PAGE
	.SBTTL	SWITCH TEST
;DISPLAYS SWITCH BITS (1&0) ON SCREEN
;PUSHING A SWITCH, CHANGE SHOWS ON SCREEN
SWTTST:	LDAA	I,08
	STAA	E,STN12			;TURN ON THE START LAMPS
	STAA	D,R0
	LDX	I,0626			;FIRST OUTPUT ADDRESS
	LDAA	E,CN1			;FIRST SWITCH
	BSR	OUTLP
	LDAA	I,8
	STAA	D,R0
	LDX	I,0666
	LDAA	E,CN2
	BSR	OUTLP
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	SWTTST
	JSR	E,BLANK
	RTS
OUTLP:	CLR	E,PSYNC			;OUTPUT STRING OF 1'S AND 0'S
	CLR	E,SYNC
	LDAB	D,PSYNC
	BPL	S,-2
	STAA	E,CN2
	LDAB	I,30
	ASLA
	BCC	1$
	INCB
1$:	STAB	X,0
	INX
	DEC	E,R0
	BNE	OUTLP
	STAA	E,STF12			;TURN OFF THE LAMPS
	RTS
	.PAGE
	.SBTTL	POT ALIGNMENT TEST
;ALLOWS VERIFICATION OF POT ALIGNMENT
POTALG:	LDAA	I,1
	JSR	E,MESOUT
	LDAA	I,2			;P1X
	JSR	E,MESOUT
	CLR	E,R0
	LDX	I,P1
	JSR	E,POTADJ
	COM	E,R0
	LDAA	I,3			;P1Y
	JSR	E,MESOUT
	JSR	E,PXAL
	CLR	E,R0
	LDAA	I,4			;P2X
	JSR	E,MESOUT
	LDX	I,P2
	JSR	E,POTADJ
	COM	E,R0
	LDAA	I,5			;P2Y
	JSR	E,MESOUT
	JSR	E,PXAL
	JSR	E,BLANK
1$:	LDAA	E,TPUSH
	BITA	I,40
	BEQ	1$
	JMP	E,CKLP2			;RETURN
POTADJ:	STX	D,R1			;R0=0 => X POT
PXAL:	LDX	D,R1			;R0=200 => Y POT
	STAA	E,CN2
	JSR	E,GETVAL
	TST	E,R0
	BPL	XPOT
	CMPB	I,08
	BRA	S,+4
XPOT:	CMPA	I,08
	BEQ	PXDN
	BCS	PXUP
	STAA	E,BUMP+1
PXUN:	LDAA	I,6			;NOT ALIGNED
	JSR	E,MESOUT
	LDAA	I,7
	JSR	E,MESOUT		;CLEAR "PUSH START2"
	BRA	PXAL
PXUP:	STAA	E,BUMP
	BRA	PXUN
PXDN:	STAA	E,BUMP
	LDAA	I,8			;"ALIGNED"
	JSR	E,MESOUT
	LDAA	I,9			;PUSH START2
	JSR	E,MESOUT
	LDAA	E,CN2
	BITA	I,040
	BNE	PXAL
	LDAA	E,CN2
	BITA	I,040
	BEQ	S,-5
	LDAA	I,7			;CLEAR "PUSH START2"
	JSR	E,MESOUT
	RTS
;USED A&B: X-POT VALUE RETURNED IN A, Y-POT VALUE RETURNED IN B
GETVAL:	LDAA	I,08
	STAA	E,CONTRL
	LDAB	X,0
	BITB	I,08
	BNE	S,+3
	CLRA
	ORAA	I,4
	STAA	E,CONTRL
	LDAB	X,0
	BITB	I,08
	BNE	S,+4
	ANDA	I,08
	ORAA	I,2
	STAA	E,CONTRL
	LDAB	X,0
	BITB	I,08
	BNE	S,+4
	ANDA	I,0C
	ORAA	I,1
	STAA	E,CONTRL
	LDAB	X,0
	BITB	I,08
	BNE	S,+4
	ANDA	I,0E
	STAA	D,TEMP			;X SAVED
	LDAB	I,08
	STAB	E,CONTRL
	LDAA	X,0
	BITA	I,4
	BNE	S,+3
	CLRB
	ORAB	I,4
	STAB	E,CONTRL
	LDAA	X,0
	BITA	I,4
	BNE	S,+4
	ANDB	I,08
	ORAB	I,2
	STAB	E,CONTRL
	LDAA	X,0
	BITA	I,4
	BNE	S,+4
	ANDB	I,0C
	ORAB	I,1
	STAB	E,CONTRL
	LDAA	X,0
	BITA	I,4
	BNE	S,+4
	ANDB	I,0E
	LDAA	D,TEMP
	RTS
	.PAGE
	.SBTTL	VERTICAL POSITION TEST
;FIRST DISPLAYS ALL BALLS ON SCREEN
;ON D6, MOVES THEM VERTICALLY
VPTST:	CLI
	JSR	E,BLANK
	JSR	E,CLPOS
7$:	LDAB	I,08			;OBJECT COUNT
	LDAA	I,60
	LDX	I,OBJH			;INITIALIZE HORIZONTAL POSITIONS
1$:	STAA	X,0
	STAA	X,8
	ADDA	I,10
	INX
	DECB
	BNE	1$
	LDAB	I,8			;SEPARATE 8 OBJECTS
	LDX	I,OBJV
	LDAA	I,78			;SECOND RUN
5$:	STAA	X,0
	INX
	DECB
	BNE	5$
	STAA	E,CN2
	LDAB	I,8			;OFFSET THE SECOND ROW OF BALLS
	LDAA	I,8C
15$:	STAA	X,0
	INX
	DECB
	BNE	15$
4$:	CLR	E,PSYNC
	COM	E,PSYNC
	CLR	E,SYNC			;WAIT FOR INTERRUPT
2$:	TST	E,SYNC
	BEQ	2$
	STAA	E,CN2			;WATCH DOG
	LDAA	E,TPUSH
	BITA	I,040
	BEQ	7$
6$:	LDAA	E,TPUSH
	STAA	E,CN2
	BITA	I,40
	BNE	6$
10$:	LDX	I,OBJV
	LDAA	I,10			;MOVE ALL 16 OBJECTS VERTICALLY
3$:	INC	X,0
	INX
	DECA
	BNE	3$
	CLR	E,PSYNC			;WAIT FOR INTERRUPT
	COM	E,PSYNC
	CLR	E,SYNC
9$:	TST	E,SYNC
	BEQ	9$
	STAA	E,CN2
	LDAA	E,TPUSH			;PUSH BUTTON?
	BITA	I,040
	BEQ	10$
	JSR	E,CLPOS
	RTS
	.PAGE
	.SBTTL	HORIZONTAL POSITION TEST
;MOVES BALL HORIZONTALLY
HPTST:	CLI
	JSR	E,BLANK
	JSR	E,CLPOS
	LDAB	I,08
	LDAA	I,60
	LDX	I,OBJV			;INITIALIZE VERTICAL POSITION
1$:	STAA	X,0			;STORE TO OBJECTS
	STAA	X,8
	ADDA	I,10
	INX
	DECB				;8 TIMES 2 OBJECTS?
	BNE	1$
	LDAB	I,8
	LDX	I,OBJH
	LDAA	I,10			;OFFSET 8 OF THE 16
5$:	STAA	X,0
	INX
	DECB
	BNE	5$
	STAA	E,CN2
4$:	CLR	E,PSYNC
	COM	E,PSYNC
	CLR	E,SYNC			;ALLOW INTERRUPT
2$:	TST	E,SYNC
	BEQ	2$
	STAA	E,CN2			;WATCH DOG
	LDX	I,OBJH			;MOVE OBJECTS
	LDAA	I,10
3$:	INC	X,0
	INX
	DECA
	BNE	3$
	LDAA	E,TPUSH			;PUSH BUTTON?
	BITA	I,040
	BEQ	4$
	JSR	E,CLPOS
	JSR	E,BLANK
	RTS
;WAIT FOR D6 OFF ROUTINE
TPSH:	LDAA	I,0FF			;WAIT LOOP
	DECA
	BNE	S,-1
	STAA	E,CN2			;WATCH DOG PULSE
	LDAA	E,TPUSH			;WAIT FOR RELEASE
	BITA	I,40
	BNE	TPSH
	RTS
	.PAGE
	.SBTTL	SOUND TEST
;OUTPUTS (TOGGLES) SOUNDS AS INDICATED
;SOUND TEST
SNDTST:	CLR	E,BUMP			;SOUNDS OFF
	CLR	E,SCRAT
	STAA	E,CN2			;WARN DOG
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	SNDTST
	BSR	TPSH
BMP:	STAA	E,BUMP+1		;BUMP ON
	BSR	TIMEW			;A BIT OF DELAY TIME
	STAA	E,BUMP			;BUMP OFF
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	BMP
	BSR	TPSH
SCR:	STAA	E,SCRAT+1		;SOUND ON
	BSR	TIMEW			;A BIT OF DELAY TIME
	STAA	E,SCRAT			;SOUND OFF
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	SCR
	BSR	TPSH
CLK:	STAA	E,CLICK			;TAP CLICK
	BSR	TIMEW			;A BIT OF TIME DELAY
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	CLK
	JSR	E,TPSH
SCRS:	STAA	E,SCORES
	BSR	TIMEW			; A BIT MORE TIME DELAY.....
	LDAA	E,TPUSH
	BITA	I,40
	BEQ	SCRS
	JSR	E,TPSH
	RTS
	; TIME DELAY ROUTINE AND WATCH DOG PULSE
TIMEW:	CLI
	STAA	E,CN2			; DONT BOTHER THE SLEEPING DOG PLEASE
	CLR	E,PSYNC
	CLR	E,SYNC
	LDAA	D,PSYNC
	BPL	S,-2			;WAIT FOR END OF FRAME
	RTS
	.PAGE
	.SBTTL	SUBROUTINES FOR VARIOUS OCCASIONS
;SUBROUTINES
;CLEAR OBJECTS OFF SCREEN
CLPOS:	LDX	I,01F			;CLEAR BOTH V&H POSITIONS
1$:	CLR	X,0
	DEX
	BNE	1$
	CLR	X,0			;MUST CLEAR THE QUE BALL ALSO
	CLI
	CLR	E,SYNC			;ALLOW INTERRUPTS
2$:	TST	E,SYNC			;CLEAR INTERRUPTS AND WAIT
	BEQ	2$
	RTS
MESOUT:	ASLA
	LDX I,MIN
 	STX D,MORA
	TAB
	ADDA D,MORA+1
	STAA D,MORA+1
	BCC 1$
	INC E,MORA
1$:	LDX I,MOUT
	STX D,MORD
	ADDB D,MORD+1
	STAB D,MORD+1
	BCC 2$
	INC E,MORD
2$:	LDX D,MORA
	LDX X,0
	STX D,MORA
	LDX D,MORD
	LDX X,0
	STX D,MORD
MSOUT1:	CLR E,SYNC
	CLR E,PSYNC
	CLI
	STAA	E,CN2
MSOUT3:	LDAA D,PSYNC
	BPL MSOUT3
MESLP:	LDX D,MORA
	LDAA X,0
	BMI MRORE
	TAB
	CLRA
MESLOP:	INX
	STX D,MORA
	LDX D,MORD
MDRLP:	STAB X,0
	INX
	DECA
	BPL MDRLP
	STX D,MORD
	BRA MESLP
MRORE:	COMA
	BNE MESLOP
	STAA	E,CN2
	RTS
	.PAGE
	.SBTTL	INTERRUPT ROUTINE
INT:	LDAA	D,SYNC
	BPL	DISP1
INTA:	LDAA	E,IRQRST
	LDAA	D,PSYNC
	BMI	S,+5
	COM	E,PSYNC
	RTI
DISP1:	LDAA	D,PSYNC
	BMI	DISP2
	COM	E,PSYNC
	BRA	INTA
DISP2:	STS	D,SPT
	LDS	I,-1
	LDX	I,HPOS
	LDAA	I,10
DOLOOP:	PULB
	STAB	X,0
	INX
	DECA
	BNE	DOLOOP
	LDX	I,VPOS
	LDAA	I,10
DOVLP:	PULB
	STAB	X,0
	INX
	DECA
	BNE	DOVLP
	LDS	D,SPT
	COM	E,SYNC
	TST	E,CN2
	LDAA	E,IRQRST
	RTI
	.PAGE
	.SBTTL	MESSAGE TABLES & TEXT STRINGS
;MESS0 - "SELECT TEST"
MESS0:	.BYTE	13,5,0C,5,3,14,0,14,5,13,14,-1
	;MESS1 - "POT"
MESS1:	.BYTE	10,0F,14,0,-1
	;MESS2 - P1
MESS2:	.BYTE	10,31,-1
MESS3:	.BYTE	10,32,-1
MESS4:	.BYTE	10,33,-1
MESS5:	.BYTE	10,34,-1
	;MESS 6 - NOT ALIGNED
MESS6:	.BYTE	0E,0F,14,0,1,0C,09,7,0E,5,4,-1
MESS7:	.BYTE	0,-15,-1
	;MESS 8 - ALIGNED
MESS8:	.BYTE	1,0C,09,7,0E,5,4,0,-3,-1
	;MESS 9 - PUSH START 2
MESS9:	.BYTE	10,15,13,08,0,13,14,1,12,14,32,-1
	;MESSA - ROM TEST COMPLETED
MESSA:	.BYTE 	12,0F,0D,0,14,5,13,14,0,3,0F,0D,10,0C,5,14,5,-1
MIN:	.WORD	MESS0
	.WORD	MESS1
	.WORD	MESS2
	.WORD	MESS3
	.WORD	MESS4
	.WORD	MESS5
	.WORD	MESS6
	.WORD	MESS7
	.WORD	MESS8
	.WORD	MESS9
	.WORD	MESSA
MOUT:	.BYTE	DISP+03B0&0FF00/100,DISP+03B0&0FF	;0
	.BYTE	DISP+267&0FF00/100,DISP+267&0FF		;1
	.BYTE	DISP+026B&0FF00/100,DISP+026B&0FF	;2
	.BYTE	DISP+026B&0FF00/100,DISP+026B&0FF	;3
	.BYTE	DISP+026B&0FF00/100,DISP+026B&0FF	;4
	.BYTE	DISP+026B&0FF00/100,DISP+026B&0FF	;5
	.BYTE	DISP+026F&0FF00/100,DISP+026F&0FF	;6
	.BYTE	DISP+02E0&0FF00/100,DISP+02E0&0FF	;7
	.BYTE	DISP+026F&0FF00/100,DISP+026F&0FF	;8
	.BYTE	DISP+02E2&0FF00/100,DISP+02E2&0FF	;9
	.BYTE	DISP+03A5&0FF00/100,DISP+03A5&0FF	;A
FILR	=47F2-.
	.REPT FILR
	.BYTE 0
	.ENDR
	.=47F2
STUP:	LDS	I,375
	JMP	E,DIAG
	.WORD	INT			;REST VECTORS IF PROG MISSING
	.WORD	STUP
	.WORD	STUP
	.WORD	STUP
	.END
                                                                                                                                                                                                                                                                                                                                                                                                         